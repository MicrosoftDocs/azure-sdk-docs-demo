### YamlMime:TSType
name: AppConfigurationClient
uid: '@azure/app-configuration.AppConfigurationClient|latest-stable'
package: '@azure/app-configuration|latest-stable'
summary: Client for the Azure App Configuration service.
fullName: AppConfigurationClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: AppConfigurationClient(string, AppConfigurationClientOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.constructor|latest-stable'
    package: '@azure/app-configuration|latest-stable'
    summary: Initializes a new instance of the AppConfigurationClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new AppConfigurationClient(connectionString: string, options?:
        AppConfigurationClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: Connection string needed for a client to connect to Azure.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.AppConfigurationClientOptions|latest-stable"
            />
          description: |
            Options for the AppConfigurationClient.
  - name: >-
      AppConfigurationClient(string, TokenCredential,
      AppConfigurationClientOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.constructor_1|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: |-
      Initializes a new instance of the AppConfigurationClient class using
      a TokenCredential.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new AppConfigurationClient(endpoint: string, tokenCredential:
        TokenCredential, options?: AppConfigurationClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The endpoint of the App Configuration service (ex:
            https://sample.azconfig.io).
        - id: tokenCredential
          type: TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the \@azure/identity
            package to create a credential that suits your needs.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.AppConfigurationClientOptions|latest-stable"
            />
          description: |
            Options for the AppConfigurationClient.
methods:
  - name: >-
      addConfigurationSetting(AddConfigurationSettingParam |
      AddConfigurationSettingParam<FeatureFlagValue> |
      AddConfigurationSettingParam<SecretReferenceValue>,
      AddConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.addConfigurationSetting|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: >-
      Add a setting into the Azure App Configuration service, failing if it

      already exists.

      Example usage:

      ```ts

      const result = await client.addConfigurationSetting({ key: "MyKey", label:
      "MyLabel", value: "MyValue" });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addConfigurationSetting(configurationSetting:
        AddConfigurationSettingParam |
        AddConfigurationSettingParam<FeatureFlagValue> |
        AddConfigurationSettingParam<SecretReferenceValue>, options?:
        AddConfigurationSettingOptions)
      parameters:
        - id: configurationSetting
          type: >-
            <xref
            uid="@azure/app-configuration.AddConfigurationSettingParam|latest-stable"
            /> | <xref
            uid="@azure/app-configuration.AddConfigurationSettingParam|latest-stable"
            />&lt;<xref
            uid="@azure/app-configuration.FeatureFlagValue|latest-stable" />&gt;
            | <xref
            uid="@azure/app-configuration.AddConfigurationSettingParam|latest-stable"
            />&lt;<xref
            uid="@azure/app-configuration.SecretReferenceValue|latest-stable"
            />&gt;
          description: A configuration setting.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.AddConfigurationSettingOptions|latest-stable"
            />
          description: |
            Optional parameters for the request.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.AddConfigurationSettingResponse|latest-stable"
          />&gt;
        description: ''
  - name: >-
      deleteConfigurationSetting(ConfigurationSettingId,
      DeleteConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.deleteConfigurationSetting|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: >-
      Delete a setting from the Azure App Configuration service

      Example usage:

      ```ts

      const deletedSetting = await client.deleteConfigurationSetting({ key:
      "MyKey", label: "MyLabel" });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteConfigurationSetting(id: ConfigurationSettingId,
        options?: DeleteConfigurationSettingOptions)
      parameters:
        - id: id
          type: >-
            <xref
            uid="@azure/app-configuration.ConfigurationSettingId|latest-stable"
            />
          description: The id of the configuration setting to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.DeleteConfigurationSettingOptions|latest-stable"
            />
          description: |
            Optional parameters for the request (ex: etag, label)
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.DeleteConfigurationSettingResponse|latest-stable"
          />&gt;
        description: ''
  - name: >-
      getConfigurationSetting(ConfigurationSettingId,
      GetConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.getConfigurationSetting|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: >-
      Gets a setting from the Azure App Configuration service.

      Example code:

      ```ts

      const setting = await client.getConfigurationSetting({ key: "MyKey",
      label: "MyLabel" });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConfigurationSetting(id: ConfigurationSettingId, options?:
        GetConfigurationSettingOptions)
      parameters:
        - id: id
          type: >-
            <xref
            uid="@azure/app-configuration.ConfigurationSettingId|latest-stable"
            />
          description: The id of the configuration setting to get.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.GetConfigurationSettingOptions|latest-stable"
            />
          description: |
            Optional parameters for the request.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.GetConfigurationSettingResponse|latest-stable"
          />&gt;
        description: ''
  - name: listConfigurationSettings(ListConfigurationSettingsOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.listConfigurationSettings|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: >-
      Lists settings from the Azure App Configuration service, optionally

      filtered by key names, labels and accept datetime.

      Example code:

      ```ts

      const allSettingsWithLabel = client.listConfigurationSettings({
      labelFilter: "MyLabel" });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listConfigurationSettings(options?:
        ListConfigurationSettingsOptions)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.ListConfigurationSettingsOptions|latest-stable"
            />
          description: |
            Optional parameters for the request.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/app-configuration.ConfigurationSetting|latest-stable" />,
          <xref
          uid="@azure/app-configuration.ListConfigurationSettingPage|latest-stable"
          />, <xref uid="@azure/app-configuration.PageSettings|latest-stable"
          />&gt;
        description: ''
  - name: listRevisions(ListRevisionsOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.listRevisions|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: |-
      Lists revisions of a set of keys, optionally filtered by key names,
      labels and accept datetime.
      Example code:
      ```ts
      const revisionsIterator = client.listRevisions({ keys: ["MyKey"] });
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listRevisions(options?: ListRevisionsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.ListRevisionsOptions|latest-stable" />
          description: |
            Optional parameters for the request.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/app-configuration.ConfigurationSetting|latest-stable" />,
          <xref uid="@azure/app-configuration.ListRevisionsPage|latest-stable"
          />, <xref uid="@azure/app-configuration.PageSettings|latest-stable"
          />&gt;
        description: ''
  - name: >-
      setConfigurationSetting(SetConfigurationSettingParam |
      SetConfigurationSettingParam<FeatureFlagValue> |
      SetConfigurationSettingParam<SecretReferenceValue>,
      SetConfigurationSettingOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.setConfigurationSetting|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: >-
      Sets the value of a key in the Azure App Configuration service, allowing
      for an optional etag.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setConfigurationSetting(configurationSetting:
        SetConfigurationSettingParam |
        SetConfigurationSettingParam<FeatureFlagValue> |
        SetConfigurationSettingParam<SecretReferenceValue>, options?:
        SetConfigurationSettingOptions)
      parameters:
        - id: configurationSetting
          type: >-
            <xref
            uid="@azure/app-configuration.SetConfigurationSettingParam|latest-stable"
            /> | <xref
            uid="@azure/app-configuration.SetConfigurationSettingParam|latest-stable"
            />&lt;<xref
            uid="@azure/app-configuration.FeatureFlagValue|latest-stable" />&gt;
            | <xref
            uid="@azure/app-configuration.SetConfigurationSettingParam|latest-stable"
            />&lt;<xref
            uid="@azure/app-configuration.SecretReferenceValue|latest-stable"
            />&gt;
          description: A configuration value.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.SetConfigurationSettingOptions|latest-stable"
            />
          description: >
            Optional parameters for the request.


            Example code:

            ```ts

            await client.setConfigurationSetting({ key: "MyKey", value:
            "MyValue" });

            ```
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.SetConfigurationSettingResponse|latest-stable"
          />&gt;
        description: ''
  - name: setReadOnly(ConfigurationSettingId, boolean, SetReadOnlyOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.setReadOnly|latest-stable'
    package: '@azure/app-configuration|latest-stable'
    summary: Sets or clears a key's read-only status.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setReadOnly(id: ConfigurationSettingId, readOnly: boolean,
        options?: SetReadOnlyOptions)
      parameters:
        - id: id
          type: >-
            <xref
            uid="@azure/app-configuration.ConfigurationSettingId|latest-stable"
            />
          description: |
            The id of the configuration setting to modify.
        - id: readOnly
          type: boolean
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.SetReadOnlyOptions|latest-stable" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.SetReadOnlyResponse|latest-stable"
          />&gt;
        description: ''
  - name: updateSyncToken(string)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.updateSyncToken|latest-stable
    package: '@azure/app-configuration|latest-stable'
    summary: >-
      Adds an external synchronization token to ensure service requests receive
      up-to-date values.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function updateSyncToken(syncToken: string)'
      parameters:
        - id: syncToken
          type: string
          description: |
            The synchronization token value.
