### YamlMime:TSType
name: QueueClient
uid: '@azure/storage-queue.QueueClient|latest-stable'
package: '@azure/storage-queue|latest-stable'
summary: >-
  A QueueClient represents a URL to an Azure Storage Queue's messages allowing
  you to manipulate its messages.
fullName: QueueClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: QueueClient(string, Pipeline)
    uid: '@azure/storage-queue.QueueClient.constructor_2|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Creates an instance of QueueClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new QueueClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue, such as
                                "https://myaccount.queue.core.windows.net/myqueue". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.queue.core.windows.net/myqueue?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-queue.Pipeline|latest-stable" />
          description: |
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      QueueClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueClient.constructor_1|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Creates an instance of QueueClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new QueueClient(url: string, credential?: StorageSharedKeyCredential |
        AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue, such as
                                "https://myaccount.queue.core.windows.net/myqueue". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.queue.core.windows.net/myqueue?sasString".
        - id: credential
          type: >-
            <xref
            uid="@azure/storage-queue.StorageSharedKeyCredential|latest-stable"
            /> | <xref
            uid="@azure/storage-queue.AnonymousCredential|latest-stable" /> |
            TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.StoragePipelineOptions|latest-stable" />
          description: |
            Options to configure the HTTP pipeline.
  - name: QueueClient(string, string, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueClient.constructor|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Creates an instance of QueueClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new QueueClient(connectionString: string, queueName: string, options?:
        StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: queueName
          type: string
          description: Queue name.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.StoragePipelineOptions|latest-stable" />
          description: |
            Options to configure the HTTP pipeline.
properties:
  - name: accountName
    uid: '@azure/storage-queue.QueueClient.accountName|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: ''
    fullName: accountName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: name
    uid: '@azure/storage-queue.QueueClient.name|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: The name of the queue.
    fullName: name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string name
      return:
        type: string
        description: ''
  - name: url
    uid: '@azure/storage-queue.QueueClient.url|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: clearMessages(QueueClearMessagesOptions)
    uid: '@azure/storage-queue.QueueClient.clearMessages|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Clear deletes all messages from a queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function clearMessages(options?: QueueClearMessagesOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueClearMessagesOptions|latest-stable"
            />
          description: Options to clear messages operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueClearMessagesResponse|latest-stable"
          />&gt;
        description: Response data for the clear messages operation.
  - name: create(QueueCreateOptions)
    uid: '@azure/storage-queue.QueueClient.create|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Creates a new queue under the specified account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: QueueCreateOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueCreateOptions|latest-stable" />
          description: Options to Queue create operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueCreateResponse|latest-stable" />&gt;
        description: >-
          Response data for the Queue create operation.


          Example usage:


          ```js

          const queueClient = queueServiceClient.getQueueClient("<new queue
          name>");

          const createQueueResponse = await queueClient.create();

          ```
  - name: createIfNotExists(QueueCreateOptions)
    uid: '@azure/storage-queue.QueueClient.createIfNotExists|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      Creates a new queue under the specified account if it doesn't already
      exist.

      If the queue already exists, it is not changed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createIfNotExists(options?: QueueCreateOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueCreateOptions|latest-stable" />
          description: |
            -
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueCreateIfNotExistsResponse|latest-stable"
          />&gt;
        description: ''
  - name: delete(QueueDeleteOptions)
    uid: '@azure/storage-queue.QueueClient.delete|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Deletes the specified queue permanently.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: QueueDeleteOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteOptions|latest-stable" />
          description: Options to Queue delete operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueDeleteResponse|latest-stable" />&gt;
        description: |-
          Response data for the Queue delete operation.

          Example usage:

          ```js
          const deleteQueueResponse = await queueClient.delete();
          console.log(
            "Delete queue successfully, service assigned request Id:", deleteQueueResponse.requestId
          );
          ```
  - name: deleteIfExists(QueueDeleteOptions)
    uid: '@azure/storage-queue.QueueClient.deleteIfExists|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: Deletes the specified queue permanently if it exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteIfExists(options?: QueueDeleteOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteOptions|latest-stable" />
          description: |
            -
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueDeleteIfExistsResponse|latest-stable"
          />&gt;
        description: ''
  - name: deleteMessage(string, string, QueueDeleteMessageOptions)
    uid: '@azure/storage-queue.QueueClient.deleteMessage|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: deleteMessage permanently removes the specified message from its queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMessage(messageId: string, popReceipt: string, options?:
        QueueDeleteMessageOptions)
      parameters:
        - id: messageId
          type: string
          description: Id of the message.
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the
            receive messages or update message operation.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueDeleteMessageOptions|latest-stable"
            />
          description: Options to delete message operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueDeleteMessageResponse|latest-stable"
          />&gt;
        description: Response data for the delete message operation.
  - name: exists(QueueExistsOptions)
    uid: '@azure/storage-queue.QueueClient.exists|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >
      Returns true if the specified queue exists; false otherwise.

      NOTE: use this function with care since an existing queue might be deleted
      by other clients or

      applications. Vice versa new queues might be added by other clients or
      applications after this

      function completes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exists(options?: QueueExistsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueExistsOptions|latest-stable" />
          description: |
            options to Exists operation.
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: generateSasUrl(QueueGenerateSasUrlOptions)
    uid: '@azure/storage-queue.QueueClient.generateSasUrl|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >
      Only available for QueueClient constructed with a shared key credential.

      Generates a Service Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function generateSasUrl(options: QueueGenerateSasUrlOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueGenerateSasUrlOptions|latest-stable"
            />
          description: Optional parameters.
      return:
        type: string
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
  - name: getAccessPolicy(QueueGetAccessPolicyOptions)
    uid: '@azure/storage-queue.QueueClient.getAccessPolicy|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >
      Gets details about any stored access policies specified on the queue that
      may be used with Shared Access Signatures.

      WARNING: JavaScript Date will potential lost precision when parsing start
      and expiry string.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccessPolicy(options?: QueueGetAccessPolicyOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueGetAccessPolicyOptions|latest-stable"
            />
          description: Options to Queue get access policy operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueGetAccessPolicyResponse|latest-stable"
          />&gt;
        description: Response data for the Queue get access policy operation.
  - name: getProperties(QueueGetPropertiesOptions)
    uid: '@azure/storage-queue.QueueClient.getProperties|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: |-
      Gets all user-defined metadata and system properties for the specified
      queue. Metadata is associated with the queue as name-values pairs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: QueueGetPropertiesOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueGetPropertiesOptions|latest-stable"
            />
          description: Options to Queue get properties operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueGetPropertiesResponse|latest-stable"
          />&gt;
        description: Response data for the Queue get properties operation.
  - name: peekMessages(QueuePeekMessagesOptions)
    uid: '@azure/storage-queue.QueueClient.peekMessages|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      peekMessages retrieves one or more messages from the front of the queue
      but does not alter the visibility of the message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function peekMessages(options?: QueuePeekMessagesOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueuePeekMessagesOptions|latest-stable" />
          description: Options to peek messages operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueuePeekMessagesResponse|latest-stable"
          />&gt;
        description: >-
          Response data for the peek messages operation.


          Example usage:


          ```js

          const peekMessagesResponse = await queueClient.peekMessages();

          console.log("The peeked message is:",
          peekMessagesResponse.peekedMessageItems[0].messageText);

          ```
  - name: receiveMessages(QueueReceiveMessageOptions)
    uid: '@azure/storage-queue.QueueClient.receiveMessages|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      receiveMessages retrieves one or more messages from the front of the
      queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function receiveMessages(options?: QueueReceiveMessageOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueReceiveMessageOptions|latest-stable"
            />
          description: Options to receive messages operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueReceiveMessageResponse|latest-stable"
          />&gt;
        description: |-
          Response data for the receive messages operation.

          Example usage:

          ```js
          const response = await queueClient.receiveMessages();
          if (response.receivedMessageItems.length == 1) {
            const receivedMessageItem = response.receivedMessageItems[0];
            console.log("Processing & deleting message with content:", receivedMessageItem.messageText);
            const deleteMessageResponse = await queueClient.deleteMessage(
              receivedMessageItem.messageId,
              receivedMessageItem.popReceipt
            );
            console.log(
              "Delete message successfully, service assigned request Id:",
              deleteMessageResponse.requestId
            );
          }
          ```
  - name: sendMessage(string, QueueSendMessageOptions)
    uid: '@azure/storage-queue.QueueClient.sendMessage|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      sendMessage adds a new message to the back of a queue. The visibility
      timeout specifies how long

      the message should be invisible to Dequeue and Peek operations.

      The message content is up to 64KB in size, and must be in a format that
      can be included in an XML request with UTF-8 encoding.

      To include markup in the message, the contents of the message must either
      be XML-escaped or Base64-encode.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendMessage(messageText: string, options?:
        QueueSendMessageOptions)
      parameters:
        - id: messageText
          type: string
          description: Text of the message to send
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueSendMessageOptions|latest-stable" />
          description: Options to send messages operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueSendMessageResponse|latest-stable"
          />&gt;
        description: >-
          Response data for the send messages operation.


          Example usage:


          ```js

          const sendMessageResponse = await queueClient.sendMessage("Hello
          World!");

          console.log(
            "Sent message successfully, service assigned message Id:", sendMessageResponse.messageId,
            "service assigned request Id:", sendMessageResponse.requestId
          );

          ```
  - name: setAccessPolicy(SignedIdentifier[], QueueSetAccessPolicyOptions)
    uid: '@azure/storage-queue.QueueClient.setAccessPolicy|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      Sets stored access policies for the queue that may be used with Shared
      Access Signatures.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(queueAcl?: SignedIdentifier[], options?:
        QueueSetAccessPolicyOptions)
      parameters:
        - id: queueAcl
          type: <xref uid="@azure/storage-queue.SignedIdentifier|latest-stable" />[]
          description: '-'
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueSetAccessPolicyOptions|latest-stable"
            />
          description: Options to Queue set access policy operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueSetAccessPolicyResponse|latest-stable"
          />&gt;
        description: Response data for the Queue set access policy operation.
  - name: setMetadata(Metadata, QueueSetMetadataOptions)
    uid: '@azure/storage-queue.QueueClient.setMetadata|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      Sets one or more user-defined name-value pairs for the specified queue.

      If no option provided, or no metadata defined in the option parameter, the
      queue

      metadata will be removed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        QueueSetMetadataOptions)
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-queue.Metadata|latest-stable" />
          description: If no metadata provided, all existing metadata will be removed.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueSetMetadataOptions|latest-stable" />
          description: Options to Queue set metadata operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueSetMetadataResponse|latest-stable"
          />&gt;
        description: Response data for the Queue set metadata operation.
  - name: updateMessage(string, string, string, number, QueueUpdateMessageOptions)
    uid: '@azure/storage-queue.QueueClient.updateMessage|latest-stable'
    package: '@azure/storage-queue|latest-stable'
    summary: >-
      Update changes a message's visibility timeout and contents.

      The message content is up to 64KB in size, and must be in a format that
      can be included in an XML request with UTF-8 encoding.

      To include markup in the message, the contents of the message must either
      be XML-escaped or Base64-encode.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateMessage(messageId: string, popReceipt: string, message?:
        string, visibilityTimeout?: number, options?: QueueUpdateMessageOptions)
      parameters:
        - id: messageId
          type: string
          description: Id of the message
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the
            receive messages or update message operation.
        - id: message
          type: string
          description: >-
            Message to update. If this parameter is undefined, then the content
            of the message won't be updated.
        - id: visibilityTimeout
          type: number
          description: |-
            Specifies the new visibility timeout value, in seconds,
                                              relative to server time. The new value must be larger than or equal to 0,
                                              and cannot be larger than 7 days. The visibility timeout of a message cannot
                                              be set to a value later than the expiry time.
                                              A message can be updated until it has been deleted or has expired.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-queue.QueueUpdateMessageOptions|latest-stable"
            />
          description: Options to update message operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueUpdateMessageResponse|latest-stable"
          />&gt;
        description: Response data for the update message operation.
extends: <xref uid="@azure/storage-queue.StorageClient|latest-stable" />
