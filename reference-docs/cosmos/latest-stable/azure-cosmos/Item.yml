name: Item
uid: '@azure/cosmos.Item|latest-stable'
package: '@azure/cosmos|latest-stable'
summary: Used to perform operations on a specific item.
fullName: Item
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.Item.container|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: ''
    fullName: container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        type: <xref uid="@azure/cosmos.Container" />
        description: ''
  - name: id
    uid: '@azure/cosmos.Item.id|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        type: string
        description: ''
  - name: url
    uid: '@azure/cosmos.Item.url|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string url
      return:
        type: string
        description: ''
methods:
  - name: delete<T>(RequestOptions)
    uid: '@azure/cosmos.Item.delete|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: >
      Delete the item.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete<T>(options?: RequestOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: |
            Additional options for the request
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;T&gt;&gt;
        description: ''
  - name: patch<T>(PatchRequestBody, RequestOptions)
    uid: '@azure/cosmos.Item.patch|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: >
      Perform a JSONPatch on the item.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function patch<T>(body: PatchRequestBody, options?: RequestOptions)'
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.PatchRequestBody" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: |
            Additional options for the request
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;T&gt;&gt;
        description: ''
  - name: read<T>(RequestOptions)
    uid: '@azure/cosmos.Item.read|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: >
      Read the item's definition.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.

      If the type, T, is a class, it won't pass `typeof` comparisons, because it
      won't have a match prototype.

      It's recommended to only use interfaces.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function read<T>(options?: RequestOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: |
            Additional options for the request
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;T&gt;&gt;
        description: ''
  - name: replace(ItemDefinition, RequestOptions)
    uid: '@azure/cosmos.Item.replace|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: >
      Replace the item's definition.

      There is no set schema for JSON items. They may contain any number of
      custom properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function replace(body: ItemDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ItemDefinition" />
          description: >-
            The definition to replace the existing <xref:@azure/cosmos.Item>'s
            definition with.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: |
            Additional options for the request
      return:
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;<xref
          uid="@azure/cosmos.ItemDefinition" />&gt;&gt;
        description: ''
  - name: replace<T>(T, RequestOptions)
    uid: '@azure/cosmos.Item.replace_1|latest-stable'
    package: '@azure/cosmos|latest-stable'
    summary: >
      Replace the item's definition.

      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function replace<T>(body: T, options?: RequestOptions)'
      parameters:
        - id: body
          type: T
          description: >-
            The definition to replace the existing <xref:@azure/cosmos.Item>'s
            definition with.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: |
            Additional options for the request
      return:
        type: Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;T&gt;&gt;
        description: ''
